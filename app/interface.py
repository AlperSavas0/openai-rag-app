import gradio as gr
from loader import load_pdf_text, chunk_text
from retriever import create_faiss_index, get_similar_chunks
from llm import get_answer
from pathlib import Path
import tempfile

def process_question(pdf_file, question):
     
    """
    Process the uploaded PDF and question to generate an answer.

    Args:
        pdf_file (file-like object): The uploaded PDF file.
        question (str): The user's question about the document.

    Returns:
        str: The answer generated by the language model based on the document content.
    """
    # Check if the PDF file and question are provided
    if not pdf_file:
        return "Lütfen bir PDF dosyası yükleyin."
    if not question:
        return "Lütfen bir soru girin."     
   
    
    # Save the uploaded PDF file to a temporary location
    with tempfile.NamedTemporaryFile(delete=False, suffix=".pdf") as tmp:
        with open(pdf_file, "rb") as f:
            tmp.write(f.read())
        tmp_path = tmp.name

    # Exctract text from the PDF  
    raw_text = load_pdf_text(tmp_path)
    print("PDF dosyasından okunan metin:", raw_text[:1000]) 
    
    # split the text into chunks
    chunks= chunk_text(raw_text) 
    print("Chunk sayısı:", len(chunks)) 

    # Create FAISS index from the chunks
    create_faiss_index(chunks)

    # Retrieve top-k relevant chunks using the question
    similiar_chunks = get_similar_chunks(question)
    print("Benzer bulunan parça sayısı:", len(similiar_chunks))
    print("En alakalı parça:", similiar_chunks[0] if similiar_chunks else "Yok")
    
    # Get the answer from the LLM using the relevant chunks
    answer=get_answer(question, similiar_chunks)
    return answer

 #Gradio interface definition
 
iface = gr.Interface(
    fn=process_question,
    inputs=[
        gr.File(label="PDF Dosyası"),
        gr.Textbox(label="Bir soru girin")
    ],
    outputs=gr.Textbox(label="Cevap"),
    title="Döküman Sorgulama Aracı",
    description="PDF dosyalarından bilgi çekip sorulara cevap veren bir Yapay Zeka Asistanı."
)

if __name__ == "__main__":
    iface.launch()